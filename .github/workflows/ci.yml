name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 black isort
        pip install -r tools-portal/requirements.txt
        pip install -r dns_by_eye/requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 tools-portal --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 dns_by_eye --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 tools-portal --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        flake8 dns_by_eye --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check tools-portal/
        black --check dns_by_eye/

    - name: Check import sorting with isort
      run: |
        isort --check-only tools-portal/
        isort --check-only dns_by_eye/

    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=tools-portal --cov=dns_by_eye --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run safety check
      run: |
        safety check -r tools-portal/requirements.txt
        safety check -r dns_by_eye/requirements.txt

    - name: Run bandit security check
      run: |
        bandit -r tools-portal/ -f json -o bandit-tools-portal.json || true
        bandit -r dns_by_eye/ -f json -o bandit-dns-by-eye.json || true

    - name: Run semgrep security scan
      run: |
        semgrep --config=auto tools-portal/ dns_by_eye/ --json --output=semgrep-results.json || true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build tools-portal image
      run: |
        docker build -t tools-portal:latest tools-portal/

    - name: Build dns-by-eye image
      run: |
        docker build -t dns-by-eye:latest dns_by_eye/

    - name: Test Docker images
      run: |
        # Test that images can start
        docker run --rm -d --name test-tools-portal -p 5000:5000 tools-portal:latest
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-tools-portal

        docker run --rm -d --name test-dns-by-eye -p 5001:5000 dns-by-eye:latest
        sleep 10
        curl -f http://localhost:5001/api/health || exit 1
        docker stop test-dns-by-eye

  integration:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with docker-compose
      run: |
        docker-compose -f tools-portal/docker-compose-tools.yaml up -d
        sleep 30

    - name: Run integration tests
      run: |
        # Test tools portal
        curl -f http://localhost/health
        curl -f http://localhost/api/tools
        
        # Test DNS By Eye
        curl -f http://localhost/dns-by-eye/api/health
        curl -f http://localhost/dns-by-eye/api/dns-servers

    - name: Stop services
      run: |
        docker-compose -f tools-portal/docker-compose-tools.yaml down

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, docker, integration]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' }}
      run: echo "✅ All checks passed successfully!"
      
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' }}
      run: echo "❌ Some checks failed. Please review the logs."
